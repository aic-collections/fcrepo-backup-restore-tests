#!/usr/bin/env python

import yaml
import sys
import os

import datetime
from time import gmtime, strftime, sleep

import requests

from modules.config_parser import args
from modules.counter import Counter
from modules.go import GraphOperation
from modules.ho import HTTPOperation
from modules.helpers import get_hexdec_combos

config = yaml.safe_load(open(args.config))
print()
print("Config:")
print(config)
print()

COMBINATIONS = get_hexdec_combos()
counter = Counter()
c_counter = 0
s_counter = 0

# Make sure container exists
requests.put(config["fcrepo"]["base"])

# Insert the relations
relations = GraphOperation(config)
relations.loadGraph(config["source_relations"])
relations_subjects = relations.getSubjects(-1)

http_ops = HTTPOperation(config, counter)
http_ops.insertRelations(relations_subjects, relations.g)

# Parse the sample source data
resources = GraphOperation(config)
resources.loadGraph(config["source_data"])
resources_subjects = resources.getSubjects(-1)

st = datetime.datetime.now()
starttime = strftime("%Y-%m-%d %H:%M:%S", gmtime())

for s in resources_subjects:
    c = COMBINATIONS[c_counter]
    http_ops.put_request(s, c, resources.g)
    s_counter = s_counter + 1
    if s_counter % config["multiplier"] == 0:
        c_counter = c_counter + 1
        if (c_counter + 1) > len(COMBINATIONS):
            break

gt = gmtime()
endtime = strftime("%Y-%m-%d %H:%M:%S", gt)
et = datetime.datetime.now()
timedelta = et - st

loaded_uris_file = 'source-data/loaded-uris/' + strftime("%Y%m%d%H%M%S", gt) + '.txt'
with open(loaded_uris_file, 'w') as f:
    f.write("\n".join(counter.results))

counter.output(starttime, endtime, timedelta, config["load_binary_data"])

print("Loaded uris: " + loaded_uris_file)
print()

print("Verify the load: ")
print("./test-gets --config " + args.config + " --data " + loaded_uris_file)
print()





